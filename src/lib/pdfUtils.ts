import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Transaction } from './types';
import { formatCurrency } from './utils';

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: typeof autoTable;
  }
}

export interface ReportData {
  transactions: Transaction[];
  currency: string;
  title: string;
  dateRange?: string;
}

export const generateTransactionsPDF = (data: ReportData) => {
  const doc = new jsPDF();
  
  // Add title
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text(data.title, 20, 20);
  
  // Add date range if provided
  if (data.dateRange) {
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Date Range: ${data.dateRange}`, 20, 30);
  }
  
  // Add generation date
  doc.setFontSize(10);
  doc.setTextColor(150, 150, 150);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, data.dateRange ? 40 : 30);
  
  // Calculate totals
  const totalIncome = data.transactions
    .filter(t => t.type === 'income')
    .reduce((sum, t) => sum + t.amount, 0);
  
  const totalExpense = data.transactions
    .filter(t => t.type === 'expense')
    .reduce((sum, t) => sum + t.amount, 0);
  
  const netBalance = totalIncome - totalExpense;
  
  // Add summary section
  const summaryY = data.dateRange ? 50 : 40;
  doc.setFontSize(14);
  doc.setTextColor(40, 40, 40);
  doc.text('Summary', 20, summaryY);
  
  doc.setFontSize(11);
  doc.setTextColor(60, 60, 60);
  doc.text(`Total Income: ${formatCurrency(totalIncome, data.currency)}`, 20, summaryY + 10);
  doc.text(`Total Expense: ${formatCurrency(totalExpense, data.currency)}`, 20, summaryY + 20);
  
  // Net balance with color coding
  if (netBalance >= 0) {
    doc.setTextColor(0, 128, 0); // Green for positive
  } else {
    doc.setTextColor(220, 20, 60); // Red for negative
  }
  doc.text(`Net Balance: ${formatCurrency(netBalance, data.currency)}`, 20, summaryY + 30);
  
  // Prepare table data
  const tableData = data.transactions.map(transaction => [
    new Date(transaction.date).toLocaleDateString(),
    transaction.description,
    transaction.category,
    transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1),
    `${transaction.type === 'income' ? '+' : '-'}${formatCurrency(transaction.amount, data.currency)}`
  ]);
  
  // Add transactions table
  doc.autoTable({
    head: [['Date', 'Description', 'Category', 'Type', 'Amount']],
    body: tableData,
    startY: summaryY + 45,
    styles: {
      fontSize: 9,
      cellPadding: 3,
    },
    headStyles: {
      fillColor: [41, 128, 185], // Blue header
      textColor: 255,
      fontStyle: 'bold',
    },
    columnStyles: {
      0: { cellWidth: 25 }, // Date
      1: { cellWidth: 50 }, // Description
      2: { cellWidth: 30 }, // Category
      3: { cellWidth: 20 }, // Type
      4: { cellWidth: 30, halign: 'right' }, // Amount
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245],
    },
    didParseCell: function(data) {
      // Color code the amount column based on transaction type
      if (data.column.index === 4 && data.section === 'body') {
        const amount = data.cell.text[0];
        if (amount.startsWith('+')) {
          data.cell.styles.textColor = [0, 128, 0]; // Green for income
        } else {
          data.cell.styles.textColor = [220, 20, 60]; // Red for expense
        }
      }
    }
  });
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Page ${i} of ${pageCount} | Generated by Budget Visual Companion`,
      20,
      doc.internal.pageSize.height - 10
    );
  }
  
  return doc;
};

export const generateReportsPDF = (data: {
  monthlyData: any[];
  categoryData: any[];
  currency: string;
}) => {
  const doc = new jsPDF();
  
  // Add title
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text('Financial Reports', 20, 20);
  
  // Add generation date
  doc.setFontSize(10);
  doc.setTextColor(150, 150, 150);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);
  
  // Monthly Balance Trend Table
  doc.setFontSize(14);
  doc.setTextColor(40, 40, 40);
  doc.text('Monthly Balance Trend', 20, 45);
  
  const monthlyTableData = data.monthlyData.map(item => [
    item.month,
    formatCurrency(item.income, data.currency),
    formatCurrency(item.expense, data.currency),
    formatCurrency(item.income - item.expense, data.currency)
  ]);
  
  doc.autoTable({
    head: [['Month', 'Income', 'Expense', 'Balance']],
    body: monthlyTableData,
    startY: 55,
    styles: {
      fontSize: 10,
      cellPadding: 4,
    },
    headStyles: {
      fillColor: [41, 128, 185],
      textColor: 255,
      fontStyle: 'bold',
    },
    columnStyles: {
      1: { halign: 'right' },
      2: { halign: 'right' },
      3: { halign: 'right' },
    },
  });
  
  // Category Distribution Table
  const finalY = (doc as any).lastAutoTable.finalY + 20;
  doc.setFontSize(14);
  doc.setTextColor(40, 40, 40);
  doc.text('Category Distribution', 20, finalY);
  
  const categoryTableData = data.categoryData.map(item => [
    item.name,
    formatCurrency(item.amount, data.currency),
    `${((item.amount / data.categoryData.reduce((sum: number, cat: any) => sum + cat.amount, 0)) * 100).toFixed(1)}%`
  ]);
  
  doc.autoTable({
    head: [['Category', 'Amount', 'Percentage']],
    body: categoryTableData,
    startY: finalY + 10,
    styles: {
      fontSize: 10,
      cellPadding: 4,
    },
    headStyles: {
      fillColor: [41, 128, 185],
      textColor: 255,
      fontStyle: 'bold',
    },
    columnStyles: {
      1: { halign: 'right' },
      2: { halign: 'right' },
    },
  });
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Page ${i} of ${pageCount} | Generated by Budget Visual Companion`,
      20,
      doc.internal.pageSize.height - 10
    );
  }
  
  return doc;
};

export const downloadPDF = (doc: jsPDF, filename: string) => {
  doc.save(filename);
};
