import jsPDF from 'jspdf';
import { Transaction } from './types';
import { formatCurrency } from './utils';

// Simple PDF generation without autoTable for better compatibility
export const generateSimplePDF = (title: string, data: any[], headers: string[], currency: string) => {
  const doc = new jsPDF();

  // Add title
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text(title, 20, 20);

  // Add generation date
  doc.setFontSize(10);
  doc.setTextColor(150, 150, 150);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);

  // Add headers
  doc.setFontSize(12);
  doc.setTextColor(40, 40, 40);
  let yPosition = 50;

  // Simple table without autoTable
  headers.forEach((header, index) => {
    doc.text(header, 20 + (index * 35), yPosition);
  });

  yPosition += 10;

  // Add data rows
  data.slice(0, 20).forEach((row, rowIndex) => { // Limit to 20 rows for simplicity
    doc.setFontSize(10);
    row.forEach((cell: string, cellIndex: number) => {
      doc.text(cell.toString().substring(0, 15), 20 + (cellIndex * 35), yPosition + (rowIndex * 8));
    });
  });

  // Add footer
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  doc.text(
    'Generated by Budget Visual Companion - P & D Technology',
    20,
    doc.internal.pageSize.height - 10
  );

  return doc;
};

export interface ReportData {
  transactions: Transaction[];
  currency: string;
  title: string;
  dateRange?: string;
}

export const generateTransactionsPDF = (data: ReportData) => {
  const doc = new jsPDF();

  // Add title
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text(data.title, 20, 20);

  // Add date range if provided
  if (data.dateRange) {
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Date Range: ${data.dateRange}`, 20, 30);
  }

  // Add generation date
  doc.setFontSize(10);
  doc.setTextColor(150, 150, 150);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, data.dateRange ? 40 : 30);

  // Calculate totals
  const totalIncome = data.transactions
    .filter(t => t.type === 'income')
    .reduce((sum, t) => sum + t.amount, 0);

  const totalExpense = data.transactions
    .filter(t => t.type === 'expense')
    .reduce((sum, t) => sum + t.amount, 0);

  const netBalance = totalIncome - totalExpense;

  // Add summary section
  const summaryY = data.dateRange ? 50 : 40;
  doc.setFontSize(14);
  doc.setTextColor(40, 40, 40);
  doc.text('Summary', 20, summaryY);

  doc.setFontSize(11);
  doc.setTextColor(60, 60, 60);
  doc.text(`Total Income: ${formatCurrency(totalIncome, data.currency)}`, 20, summaryY + 10);
  doc.text(`Total Expense: ${formatCurrency(totalExpense, data.currency)}`, 20, summaryY + 20);

  // Net balance with color coding
  if (netBalance >= 0) {
    doc.setTextColor(0, 128, 0); // Green for positive
  } else {
    doc.setTextColor(220, 20, 60); // Red for negative
  }
  doc.text(`Net Balance: ${formatCurrency(netBalance, data.currency)}`, 20, summaryY + 30);

  // Add simple transaction list
  doc.setFontSize(12);
  doc.setTextColor(40, 40, 40);
  doc.text('Transactions', 20, summaryY + 50);

  let yPos = summaryY + 65;
  doc.setFontSize(9);

  // Headers
  doc.setTextColor(40, 40, 40);
  doc.text('Date', 20, yPos);
  doc.text('Description', 50, yPos);
  doc.text('Category', 100, yPos);
  doc.text('Type', 140, yPos);
  doc.text('Amount', 170, yPos);

  yPos += 10;

  // Transaction data (limit to first 15 for space)
  data.transactions.slice(0, 15).forEach((transaction, index) => {
    doc.setTextColor(60, 60, 60);
    doc.text(new Date(transaction.date).toLocaleDateString().substring(0, 8), 20, yPos);
    doc.text(transaction.description.substring(0, 12), 50, yPos);
    doc.text(transaction.category.substring(0, 8), 100, yPos);
    doc.text(transaction.type, 140, yPos);

    // Color code amounts
    if (transaction.type === 'income') {
      doc.setTextColor(0, 128, 0);
    } else {
      doc.setTextColor(220, 20, 60);
    }
    doc.text(`${transaction.type === 'income' ? '+' : '-'}${formatCurrency(transaction.amount, data.currency)}`, 170, yPos);

    yPos += 8;
  });

  // Add footer
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  doc.text(
    'Generated by Budget Visual Companion - P & D Technology',
    20,
    doc.internal.pageSize.height - 10
  );

  return doc;
};

export const generateReportsPDF = (data: {
  monthlyData: any[];
  categoryData: any[];
  currency: string;
}) => {
  const doc = new jsPDF();

  // Add title
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text('Financial Reports', 20, 20);

  // Add generation date
  doc.setFontSize(10);
  doc.setTextColor(150, 150, 150);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);

  // Monthly Balance Trend
  doc.setFontSize(14);
  doc.setTextColor(40, 40, 40);
  doc.text('Monthly Balance Trend', 20, 45);

  let yPos = 60;
  doc.setFontSize(10);

  // Headers
  doc.setTextColor(40, 40, 40);
  doc.text('Month', 20, yPos);
  doc.text('Income', 60, yPos);
  doc.text('Expense', 100, yPos);
  doc.text('Balance', 140, yPos);

  yPos += 10;

  // Monthly data
  data.monthlyData.forEach((item, index) => {
    doc.setTextColor(60, 60, 60);
    doc.text(item.month, 20, yPos);
    doc.text(formatCurrency(item.income, data.currency), 60, yPos);
    doc.text(formatCurrency(item.expense, data.currency), 100, yPos);

    const balance = item.income - item.expense;
    if (balance >= 0) {
      doc.setTextColor(0, 128, 0);
    } else {
      doc.setTextColor(220, 20, 60);
    }
    doc.text(formatCurrency(balance, data.currency), 140, yPos);

    yPos += 8;
  });

  // Category Distribution
  yPos += 20;
  doc.setFontSize(14);
  doc.setTextColor(40, 40, 40);
  doc.text('Category Distribution', 20, yPos);

  yPos += 15;
  doc.setFontSize(10);

  // Headers
  doc.setTextColor(40, 40, 40);
  doc.text('Category', 20, yPos);
  doc.text('Amount', 80, yPos);
  doc.text('Percentage', 140, yPos);

  yPos += 10;

  // Category data
  const totalAmount = data.categoryData.reduce((sum: number, cat: any) => sum + cat.amount, 0);
  data.categoryData.forEach((item, index) => {
    doc.setTextColor(60, 60, 60);
    doc.text(item.name, 20, yPos);
    doc.text(formatCurrency(item.amount, data.currency), 80, yPos);
    doc.text(`${((item.amount / totalAmount) * 100).toFixed(1)}%`, 140, yPos);

    yPos += 8;
  });

  // Add footer
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  doc.text(
    'Generated by Budget Visual Companion - P & D Technology',
    20,
    doc.internal.pageSize.height - 10
  );

  return doc;
};

export const downloadPDF = (doc: jsPDF, filename: string) => {
  doc.save(filename);
};
